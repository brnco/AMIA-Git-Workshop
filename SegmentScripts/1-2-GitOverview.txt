Git Overview
10 minutes - live
-What is version control and who needs it?
-How does Git do version control? How does other software?
-What's the relationship between Git and GitHub?
-Git, Github, and your personal morality

1. What is version control and who needs it?
2:30

[what is version control?]

Git solves a problem called "version control"
whereby multiple people, often in separate locations,
are working on the same file or set of files.

[screencap of Google docs versions]

You might be familiar with version control through things like Google Docs,
where you can see who edited a file, see the changes they made, and restore different versions.
That's the same basic functionality that Git provides
although Git is tailored to software development in a distributed-team environment.

[ibm logo - subversion logo - git logo, etc.]

It's far from the first version control software, or ethos, either.
The first one was probably something IBM did in 1962
The major precursor to Git was something called Subversion,
I've never used it so I can't comment on its functionality
but I think we can all agree that "Subversion" is a much better name than Git

[slides off]

I do want to spend a moment here to talk about the nature of code and how it differs from office documents
Because, if you haven't worked with code, it's not obvious why you wouldn't use Git to write your monthly reports

Software isn't like office documents on Google Drive tho. It's maybe a bit like a PDF?
With a PDF, you make your changes in Word or Google Docs and you export a PDF. If you messed up, you gotta re-export.
Writing software works roughly the same way: you make changes in a text editor and render a result.
The code isn't the end product, the code creates the end product
Typical end products include: a website, a transcoded video file, an optimized ad experience, etc.

This is a big deal!
Office documents have a writing style to them that's largely subjective but also ONE OF THE MOST IMPORTANT THINGS ABOUT A DOCUMENT
Think of all the times you've revised something to get the right "tone."

Source code does not work like this.
Source code can have a tone but it's largely unrelated to the output of the program
and the output of the program is what matters.
And, the text used to create that output can be tested, unlike "tone"

so, you can't automatically integrate the tone on different branches into main, basically.
the text is just too different
There's other reasons why you wouldn't use Git for office documents
But, for me, that's the big one. You can't diff "tone"

"Diff" is a shorthand for "difference," it's a text analysis method - give diffchecker.com a look if you're curious

Anyway, to wrap up this intro,
Git provides a framework and methods for handling versioning for software and related documentation



2. How does Git do version control?
1:00

[how does git do version control?]

[git tracks changes to files]

It does so by tracking the changes to a file.
You tell Git to track a file and it records all the changes to it.
It does not save different updates to files as their own documents (like what you see in Google Docs).
It applies changes relative to other file versions.

[screenshot of a single commit]

You may have looked at a commit on GitHub and wondered,
"there's 45 different scripts in this repo but this commit is showing me 7 lines of code"
Those 7 lines are the changes.

[workflow diagram]

We can demonstrate with an example workflow:
Jenny notices that the alignment of the images on her hand-made portfolio website is all out of whack.
She opens the relevant html file in her favorite text editor, makes some changes.
She saves the changes on her computer and uploads them via FTP to her webserver.
Her website now looks better.

[workflow diagram with Git bit circled]

That "Saves the changes and uploads" bit is the thing that Git manages.

Git does not auto-rename your updated file with like "v3.js"
It actually hashes the filedata in a database, and that's how it knows if a file has changed

So, those are the basics of how Git handles version control.
We'll be getting into much more detail in a moment



3. What's the relationship between Git and GitHub?
1:30

[what's the relationship between Git and GitHub]

[local <-> remote diagram]

GitHub is a website and software service that provides hosting for remote Git repositories.
You don't need to use GitHub to run Git, or to have a remote repo.
You can build one yourself or use an alternative hosting site like GitBucket or Amazon's CodeCommit.
The reasons people use GitHub are because it's free, most people who code have some notion of how it works,
and it's really, really easy to share code with GitHub.

It's like Dropbox but streamlined for Git/ software development

Git is maintained on GitHub but the two are otherwise unaffiliated.

I mentioned earlier that GitHub is free and you might be wondering how they afford the server space
First, the filesize limit on GitHub is 100MB. Code is small.
Second, companies like Facebook pay for hosting on GitHub; in return, their code is kept private.
For free accounts, all of your code is public.
Remember that when you put a password in your code.

<<<<<<< HEAD:SegmentScripts/2-GitOverview
[screencap of signing up for git acct or w/e]

So, you sign up for a GitHub account and you link the code you're working with on your own computer to your GitHub account.
=======
So, you sign up for a GitHub account and
you link the code you're working with, on your own computer, to your GitHub account.
>>>>>>> origin:SegmentScripts/1-2-GitOverview.txt
You own a repo, you get to decide who can do what with the code.

There's also offshoots of GitHub like GitHub pages, where your repo is turned into a functioning website,
and Gist, where you upload snippets of code (i.e. "the gist of it")

There's something called GitLab which isn't related to either of these entities
but does largely the same stuff

So that's the basics of the Git ecosystem
GitHub hosts projects that use Git




4. Git, GitHub, and your personal morality
5:00

<<<<<<< HEAD:SegmentScripts/2-GitOverview
[slides off]

I want to be absolutely clear that what follows is my perspective on this and doesn't necessarily reflect the views of AMIA and of my employer.
I would also like to add content warnings about police violence and abuse
This section will conclude in about 5 minutes, if you want to step off until then

In 2018 an artist named Sam Levigne posted a script and dataset to GitHub that made quite a ruckus.
Using the LinkedIn API, Sam was able to scrape the professional LinkedIn
for people whose workplace was listed as Immigration and Customs Enforcement.
If you're not familiar, ICE is a US-government-funded gang hellbent on making life miserable for immigrants
That LinkedIn data was collated and put on GitHub so that anyone could view and make use of it.

Sam didn't post anything that wasn't already available publicly.
His contribution was compiling all the data in one place

I'm old enough to remember Perfect 10 v Google, so what happened next was really a treat to observe
Because we know that what's right isn't always legal, and what's legal isn't always right
In this case, what Sam did was both legal and right
But, it was against the GitHub Terms of Service and removed within hours

A few weeks before Sam's incident, GitHub was acquired by Microsoft.
Microsoft has contracts with ICE.
The company insisted the two events were unrelated
And indeed, this incident marked something of a shift for GitHub,
which at one time was known as the heart of the open-source community
A community with the kind of libertarian ethos that you might expect to be upset about, idk,
doing AI work for people who think borders are real or that breaking apart families is necessary to achieve "security"
=======
I had this whole story cooked up for this section but
I think you all know enough about these tech companies
and the people that own/ found them
that I don't need to hold your hand through it
>>>>>>> origin:SegmentScripts/1-2-GitOverview.txt

Git was written in 1 weekend
by the same guy who wrote Linux kernel and headed that project for 27 years, Linus Torvalds
He stepped down from the Linux project in 2018
in the face of increasing pressure to stop verbally abusing people in emails, forum posts, commit messages, etc.

Like Linux, Linus named Git after himself
(for the Americans here, a "git" is like a jerk)

GitHub has contracts with Immigration and Customs Enforcement
(for the not-Americans here, ICE are like the worst people alive)

It's owned by Microsoft, who have a well-documented history of egregious behavior
In addition to Microsoft's own AI work for ICE

Employees are leaving both companies in protest
It's not having any impact on shareholders
Biden's admin recently opened a camp with cages specially designed for children....

[beat]

Look, we need to bring critical eyes to the tools we employ to do our work
We need to keep in mind that our work isn't just us but occurs in a context
That context today is ecological collapse and a friendlier face of American empire

There are alternatives to both Git and GitHub - we won't really be discussing them here
I continue use both of these software services, and the text editor Atom, also owned by GitHub/ Microsoft
And I run Manjaro/ Arch Linux on my personal computer
That's maybe a more important statement than anything that's about to follow

I do want to put it out there, though,
that while it's important to have a critical framework for your work
Your work is not something you have a lot of control over, in the scheme of things
We're all compelled to work under capitalism, after all

And, capitalism needs abuse and exploitation in order to even exist, in the first place

The actions of Torvalds and Microsoft and ICE are symptomatic of the conditions that enabled them
If it bugs you, find a way to fight those conditions that connects with you
I got the tenants union stuff
maybe you're into community kitchens or cyberbullying the mayor or just donating to whomever needs it
In my opinion,
those kind of things are much more impactful than using/ not using a particular software service
But maybe not using tools with that kind of history is that important to you

Anyway, that's my bit on the ethics of this software ecosystem
Now you know and you can make informed decisions
