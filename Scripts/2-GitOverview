Git Overview
10 minutes - live
-What is version control and who needs it?
-How does Git do version control? How does other software?
-What's the relationship between Git and GitHub?
-Git, Github, and your personal morality

1. What is version control and who needs it?

Git solves a problem called "version control" whereby multiple people, often in separate locations, are working on the same file or set of files.
You might be familiar with version control through things like Google Docs, where you can see who edited a file, see the changes they made, and restore different versions.
That's the same basic functionality that Git provides although it's tailored to software development in a distributed-team environment.

It's far from the first version control software, or ethos, either.
There's a versioning tool that IBM developed in 1962 that's probably the first one.
The major precursor to Git was something called Subversion, which I think we can all agree is a much better name.

Software isn't like office documents, though. It's maybe a bit like a PDF?
With a PDF, you make your changes in Word or Google Docs and you export a PDF. If you messed up, you gotta re-export.
Writing software works roughly the same way: you make changes in a text editor and render a result.
The code isn't the end product, the code creates the end products (a website, a transcoded video file, etc.).

This is a critical difference between source code and office documents!
Office documents have a writing style to them that's largely subjective but also ONE OF THE MOST IMPORTANT THINGS ABOUT A DOCUMENT
Think of all the times you've revised something to get the right "tone."
Think of all the times you've wanted to parrot something a supervisor said in order to make a case for something you're working on.

Source code does not work like this.
Source code can have a tone but it's largely unrelated to the output of the program and the output of the program is what matters.
That's not to say there's not style differences between coders or between coding languages.
You've probably seen some overwrought expression on TV to the effect of "they write beautiful code" - I'm not sure I've seen beautiful code (although I've seen clever code)
Pro developers will often have a favorite language because they find it "expressive" - I just have languages that give me headaches.

Nonetheless, there are often style guides for a particular coding language that can be used to govern variable and function names or force a certain interoperability/ readability between coders.
These "styles," however, can be tested! Unlike the "tone" of an office document.
People can and do run their code through "linters" which can conform their code to a set standard.
People can test different methods of solving the same problem to find the fastest one, or the one that eats the least memory, or is the most fault-tolerant.

Imagine being able to test the "tone" of your email before an important person sees it.
Now imagine that you could force that tone on all you emails.
That's how the "style" of code differs from the style of office documents.

This is really important because that tone is often the bedrock for whatever you're really trying to communicate.
And, unlike with software, you can't really test it in an automated way, you can't conform the tone to a style guide automatically.

So, if two people disagree about the tone of a document, they workshop it back and forth until it's right.
In software, I mean there's still a human element that we'll get to, but if someone thinks a program can be constructed better, everyone involved can test it and agree on the best method (or agree there's not a best method!)

Git provides methods for handling all of those issues.



2. How does Git do version control?

Git tracks the changes to a file.
You tell Git to track a file and it records all the changes to it.
It does not save different updates to files as their own documents.
It applies changes relative to other file versions.
Files are never final.

You may have looked at a commit in your life and wondered, "there's 45 different scripts in this repo but this commit is showing me 7 lines of code"
Those are the changes.

Here's a little workflow:
Jenny notices that the alignment of the images on her hand-made portfolio website is all out of whack.
She opens the relevant html file in her favorite text editor, makes soem changes.
She saves the changes locally and uploads them via FTP to her webserver.
Her website now looks better.

That "Saves the changes and uploads" is the thing that Git manages.

Here's a little glossary:
Repository - repo for shorthand (the life of a repo man is always intense). Repos are both the file and folder structure of the code and also the changes, the users, the forums, etc.
-There are two kinds of repositories, local and remote. Local is code on your computer that you're using right now. Remote is the code on GitHub (or similar). You don't need a remote to run Git.

Commit - commits are how you add changes to a file. You can restore old commits. You can apply one commit at a time or lots of them at once. You can comment on commits.

Back to Jenny, if her friend Alex notices that the alignment could be done better, and if Jenny is using GitHub, Alex can submit a new version of her html file with the "better" code.
All the filenames stay the same.
There's no "_better_real2-FINAL.hmtl" in someone's email.
And, before Alex's code replaces Jenny's Jenny gets a chance to review it and make comments and suggestions.

That's called a Pull Request. "Pull" is another important Git term and it means to retrieve code from somewhere else (the remote repo or another repo entirely) and integrate it into the existing code.

So, you can see there's a really important relationship developing between a remote repository and a local repository.
They are linked but they are not the same.
The remote repo is where the best, most up to date, most usable and refined code is.
Everyone agrees that's where the canonical version of the code is.
Everyone agrees what the canonical version of the code is.
There's a code of conduct in the remote repo that everyone abides by.
There's a license in the remote repo that people can refer back to when deploying your code for themselves.
Remote is where others go to use or modify code that you wrote.
Remote protects against corruption to your local server.
Local is where you work, though, so that's pretty important too.

These are the basics of how Git handles version control.


3. What's the relationship between Git and GitHub?

GitHub is a website and software service that provides hosting for remote Git repositories.
You don't need to use GitHub to run Git, or to have a remote repo. You can build one yourself or use an alternative hosting site like GitBucket or Amazon's CodeCommit.
The reasons people use GitHub are because it's free, everyone who codes has some notion of how it works, and it's really, really to share code with GitHub.

Git is maintained on GitHub but the two are otherwise unaffiliated. The Linux kernel is the biggest project on GitHub (almost 1million commits!)
You might be thinking, that's a lot of server space - how does GitHub afford to provide free hosting?
The filesize limit on GitHub is 100MB. Code is small.
Additionally, companies like Facebook pay for hosting on GitHub; in return, their code is kept private.
For free accounts, all of your code is public.
Remember that when you put a password in your code.

So, you sign up for a GitHub account and you link the code you're working with on your own computer to your GitHub account.
You own a repo, you get to decide who else can do what with the code.

There's offshoots of GitHub like GitHub pages, where your repo is turned into a functioning website, and Gist, where you upload snippets of code ("the gist of it")


4. Git, GitHub, and your personal morality

Storytime again. And I want to be absolutely clear that what follows is my perspective on this and doesn't necessarily reflect the views of AMIA and of my employer.
In 2018 an artist named Sam Levigne posted a script and dataset to GitHub that made quite a ruckus.
Sam's work is really cool, he once got a Rhizome microgrant for a project where the entirety of the Enron email archive would be emailed to you in real time.
Like if you were just on copy for one of the biggest corporate implosions in history. You could watch evidence roll in on your phone. Really cool project, to me.

For another project,
Using the LinkedIn API, Sam was able to scrape the professional social media site for people whose workplace was listed as Immigration and Customs Enforcement.
If you're not in the US, ICE is a government-funded gang hellbent on making life miserable for immigrants
Anyway, that LinkedIn data was collated and put on GitHub so that anyone could make use of it.
"use" here was presumably people who wanted to make life a little more difficult for those who had chosen to sell their labor as the front line soldiers of fascism

I want to be clear on this point because it was missed in a lot of the coverage: this wasn't doxxing.
As you know, LinkedIn data isn't that private - it has your city and your image and your employer
He didn't post anything that wasn't already available publicly.

I'm old enough to remember Perfect 10 v Google, and for me the parallels were striking
In that suit, Perfect 10 magazine (LOL) alleged that collating and presenting images altogether, the way Google Image Search does,
constituted an infringement on the copyrights of the photographers.
Ultimately, the courts sided with Google and determined that collating and presenting this data altogether constituted a transformative use,
and thus was fair use.
Google was be allowed to collate and display tens of millions of images of pornography
while Sam here had his dataset of 1600 ICE employee names, photos, and cities taken down from GitHub within hours

A few weeks before Sam's incident, GitHub was acquired by Microsoft.
Microsoft has contracts with ICE.
You may have seen that Microsoft and GitHub employees are currently engaged in a protracted argument with their employer about those ICE contracts.
While the Microsoft acquisition and the ICE dataset takedown may have a tenuous direct causality
The conditions which made it all possible were very much the same, they still exist largely unchanged

In short, fuck ICE and fuck the cowards at GitHub for taking that down

Indeed, this incident marked a significant change for GitHub, which at one time was known as the heart of the open-source community
A community with the kind of libertarian ethos that you might expect to be upset about, say,
doing AI work for people who think borders are real and breaking apart families is necessary for "security"

But Git itself isn't free from this sort of controversy either.
Git was developed in a single weekend by Linus Torvalds, who also wrote the Linux kernel. He's a legend in open source.
Linux is actually named after Linus, in an interview someone asked him "Why did you name it Git?"
And he answered "I can't help but name things after myself I guess"
For idiot Americans like myself, being a git is not a nice thing (but also not the worst)

And that joke would be a lot funnier if it wasn't so true.

In September of 2018, after 27 years leading the Linux project, personally approving every single line of code, Linus Torvalds stepped down from his role
He'd been using abusive language in emails and pull-request comments, and everywhere he wrote really, for decades
One famous email from 2012 began with
"Mauro, SHUT THE FUCK UP!
It's a bug alright - in the kernel. How long have you been a
maintainer? And you *still* haven't learnt the first rule of kernel
maintenance?"

Linux is in use on some 2-billion machines worldwide.

I bring all this up because I don't want to go through 2 hours of presentation here and have you leave thinking
"this is amazing and there's nothing socially wrong with it"
We need to bring critical eyes to the tools we employ to do our work
We need to keep in mind that our work isn't just us but occurs in a context
That context today is ecological collapse and the friendlier face of empire

So, there are alternatives to GitHub, there are alternatives to Git for version control
You can find what they are on your own time
I use both of these services and that says a lot more about me than anything I could say to you now

I also want to put it out there that while it's important to have a critical framework for your work
it's not something you have a lot of control over
Like boycotts of certain brands or products, it reduces us and our capacity to institute change by tying that change to a framework of capitalism
Not that boycotts don't work occasionally but if you boycott AWS that's like 30% of the web
It's going to be exponentially harder for you to do your work, maybe these incidents matter that much to you

ultimately, though, capitalism needs abuse and exploitation in order to exist at all
Your wage labor as archivists supports such a system,
your digital community archives still require lithium, extracted and fought over at great human and ecological cost

So, if the behavior of Torvalds and Microsoft gets you as worked up as I am about it, my suggestion is twofold
Keep that feeling and get to know it a bit
Get involved in something local to where you live

I'm a member of the Los Angeles Tenants Union
LATU keeps people in their homes in the face of landlord harassment,
in the face of sheriffs trying to forcibly remove people,
in the face of 184,000 households in LA County who acquired rent debt during the pandemic and are at risk for eviction (including mine!)

Now, I just answer some emails for LATU for a few hours a week, I'm a nobody. I'm just some dude.
But, helping people stay in their homes via email has more impact on more lives than a lifetime of using BitBucket ever could

You can decide for yourself if the moral trade off is worth it for these tools, I support you
But, I want to encourage all of you to think big.
Think of what enabled these people to do horrible things and go after the conditions that made it possible
Get a group chat going with the other people in your building
donate to jail support, stop paying rent, get in the streets, cyberbully the mayor,
Buy land and sell it for $1 to a local indigenous group, stop using paper towel
There's no shortage of things to do
Whatever your thing is, do that
And, if enough people do their thing, the Torvalds and Gates of the world will have less space to be horrible

That's the hope anyway!
