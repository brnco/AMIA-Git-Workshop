Git Overview
10 minutes - live
-What is version control and who needs it?
-How does Git do version control? How does other software?
-What's the relationship between Git and GitHub?
-Git, Github, and your personal morality

1. What is version control and who needs it?
2:30

Git solves a problem called "version control"
whereby multiple people, often in separate locations,
are working on the same file or set of files.

You might be familiar with version control through things like Google Docs,
where you can see who edited a file, see the changes they made, and restore different versions.
That's the same basic functionality that Git provides
although Git is tailored to software development in a distributed-team environment.

It's far from the first version control software, or ethos, either.
The first one was probably something IBM did in 1962

The big thing that Git did relative to its precursors was
to allow each individual coder to have the full version of the code on their own machine
Rather than everyone making changes directly to the main code base
Coders copy the code base and make their changes locally
Those changes are later integrated into the main base

I'm going to repeat that because it's super important
with the Git ecosystem, everyone working on a project has their own version of that project
It's entirely separate from the main version, although the two are linked
Coders make their changes to their version of the code
Then those changes are merged with the main code base

When coders talk about "distributed," that means more than "we're not all in the office"
It means that every single person has their own fully self-contained version of the code

For that reason, and for others that I'll get into much further detail later,
It's really hard to integrate Git into your regular office environment
Offices tend to be very centralized
Your shared drive is probably already a disaster - imagine if everyone in your department had their own copy!
In contrast to code, too, people usually don't need the whole shared drive to update a single document
And, in offices, generally you just need to know what the most up-to-date version of a document is
And not how it got that way

The nature of source code is important here too
Writing code is maybe a bit like a PDF?
With a PDF, you make your changes in Word or Google Docs and you export a PDF. If you messed up, you gotta re-export.
Writing software works roughly the same way: you make changes in a text editor and render a result.
The code isn't the end product, the code creates the end product
To rephrase that: the text of the code is really only as important as its effect on the output

That's just not how office documents work
you write something you send it on, you have a meeting about it later
the text on the page is the output

If you have persistent documents, you may have milestone versions of them (corrected, finalized, raw, etc)
And I'll show you a way to integrate those into a local<->remote setup later
But really with office documents, at some point they're done
At some point you can apply "final" to your document
Code is never really done and if you add a suffix like that to the filename it often breaks things

Anyway, the good folks at NYPL will be giving a presentation later this year
On using Git for managing documentation
So stay tuned for that.

Again, I'll show some examples of a local to remote setup that is sort of git-like later in this presentation

So, to wrap up this intro,
Git provides a framework and methods for handling versioning for software and related documentation



2. How does Git do version control?
1:00

It does so by tracking the changes to content
You tell Git to track a file and it records all the changes to the content in it
It does not save different updates to files as their own documents (like what you see in Google Docs).
Files have a history but the content inside them does not
each unique batch of content, i.e. the changes, is tracked on its own

You may have looked at a commit on GitHub and wondered,
"there's 45 different scripts in this repo but this commit is showing me 7 lines of code"
Those 7 lines are the changes.

We can demonstrate with an example workflow:
You want to change the image layout on your portfolio website
You open a text editor, adjust the layout to how you want it, save the file, and upload to a server
and now the image layout is how you want it, on the open web

That "Saves the changes and uploads" bit is the thing that Git and GitHub manages.

Git does not auto-rename your updated file with like "v3.js"
It actually hashes the filedata in a database, and that's how it knows if a file has changed

So, those are the basics of how Git handles version control.
It's enough to know that it tracks the changes
We'll be getting into so much more detail in a moment



3. What's the relationship between Git and GitHub?
1:30

GitHub is a website and software service that provides hosting for remote Git repositories.
You don't need to use GitHub to run Git, or to have a remote repo.
You can build one yourself or use an alternative hosting site like GitBucket or Amazon's CodeCommit.
The reasons people use GitHub are because it's free, most people who code have some notion of how it works,
and it's really, really easy to share code with GitHub.

It's like if everyone's Dropbox was public and streamlined for Git/ software development

Git isn't maintained on GitHub, they have their own remote server

I mentioned earlier that GitHub is free and you might be wondering how they afford the server space
First, the filesize limit on GitHub is 100MB. Code is small.
Second, companies like Facebook pay for hosting on GitHub; in return, their code is kept private.
For free accounts, all of your code is public.
Remember that when you put a password in your code.

So, you sign up for a GitHub account and
you link the code you're working with, on your own computer, to your GitHub account.
You own a repo, you get to decide who can do what with the code.

There's also offshoots of GitHub like GitHub pages, where your repo is turned into a functioning website,
and Gist, where you upload snippets of code (i.e. "the gist of it")

There's something called GitLab which isn't related to either of these entities
but does largely the same stuff

And there's a dizzying array of integrations
Everything from Slack to your text editor to your terminal window
As a beginner, you don't need to worry too much about this

So that's the basics of the Git ecosystem
It's enough to know that GitHub hosts projects that use Git




4. Git, GitHub, and your personal morality
5:00

I had this whole story cooked up for this section but
I think you all know enough about these tech companies
and the people that own/ found them
that I don't need to hold your hand through it

Git was written in 1 weekend, basically
by the same guy who wrote Linux kernel and headed that project for 27 years, Linus Torvalds
He stepped down from the Linux project in 2018
in the face of increasing pressure to stop verbally abusing people in emails, forum posts, commit messages, etc.

You might be wondering about the name Git
Like Linux, Linus named Git after himself
(for the Americans here, a "git" is like a jerk)

GitHub has its own sordid thing going
Namely, it sells its enterprise system to Immigration and Customs Enforcement
(for the not-Americans here, ICE are like the worst people alive)
So, ICE could fork your repo and use your code if they wanted to

GitHub is owned by Microsoft, who have a well-documented history of egregious behavior
In addition to Microsoft's own AI work for ICE

Employees are leaving both companies in protest
It's not having any impact on shareholders
Biden's admin recently opened a camp with cages specially designed for children....

[beat]

Look, we need to bring critical eyes to the tools we employ to do our work
We need to keep in mind that our work isn't just us, but occurs in a context
That context today is ecological collapse and a friendlier face of American empire

There are alternatives to both Git and GitHub - we won't really be discussing them here
I continue use both of these software services, and the text editor Atom, also owned by GitHub/ Microsoft
And I run Linux on my personal computer
That's maybe a more important statement than anything that's about to follow

I do want to put it out there, though,
that while it's important to have a critical framework for your work
Your work is not something you have a lot of control over, in the scheme of things
We're all compelled to work under capitalism, after all

And, capitalism needs abuse and exploitation in order to even exist, in the first place

So, the actions of Torvalds and Microsoft and ICE are symptomatic of the conditions that enabled them
Rather than a personal boycott I've been trying to find ways to directly address those conditions
Stuff that connects with me, like the tenants union
maybe you're into community kitchens or cyberbullying the mayor or just donating to whomever needs it
In my opinion,
those kind of things are much more impactful than using or not using a particular software service
But maybe not using tools with that kind of history is that important to you

Anyway, that's my bit on the ethics of this software ecosystem
Now you know and you can make informed decisions
